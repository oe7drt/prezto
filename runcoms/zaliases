# dominics alias file
# arch linux - polaris
# oe7drt.com / "2023-01-31T02:14:41+0100"

#alias la='ls -lah'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

alias ducks='du -cks * | sort -rn | head'
alias confcat="sed -e 's/#.*//;/^\s*$/d' "$@""

alias sc='screen -DR Hooray'
alias dmr='screen -DR DMR'
alias tm='tmux -u new-session -A -s Eve'

[[ "$EUID" -ne 0 ]] && __is_available sudo \
&& alias admin='sudo su' \
&& alias dmesg='sudo dmesg' \
&& alias dt='dmesg | tail -n 15' \
&& alias dm='tail -f /var/log/messages'

[[ "$EUID" -ne 0 ]] && __is_available doas \
&& alias dosa='doas' \
&& alias admin='doas su' \
&& alias dmesg='doas dmesg' \
&& alias dt='doas dmesg | tail -n 15' \
&& alias dm='tail -f /var/log/messages'

[[ -d ~/sites/oe7drt-website ]] \
&& alias dr='cd ~/sites/oe7drt-website'

# [[ -d /usr/ports ]] \
# && alias up='cd /usr/ports'

__is_available hugo \
&& function runit { eval $1; } \
&& alias hs="""hugo server -DEF --gc --cleanDestinationDir --printPathWarnings --logLevel debug --bind 0.0.0.0 --baseURL http://$(runit "/sbin/ifconfig | grep broadcast | head -1 | awk '{ print \$2 }'")"""

__is_available blacklist \
&& alias bl='blacklist -a'

__is_available nvim \
&& alias vi=nvim \
&& alias vim=nvim

__is_available X \
&& alias x=startx

__is_available picocom \
&& alias os='picocom -b 115200 -d 8 -y n -p 1 /dev/tty.usbmodemDADCB8841'

__is_available yt-dlp \
&& alias yl='yt-dlp -x --audio-format mp3 --embed-thumbnail --embed-metadata'

__is_available eza \
&& unalias l && unalias la \
&& alias l='ls -1a' && alias la='ll -a' \
&& function ls {
  eza --color-scale --icons --group-directories-first $argv
} \
&& function gls {
  eza --icons --group-directories-first --git-ignore $argv
} \
&& function gll {
  eza --long --color-scale --icons --group-directories-first --git-ignore --git $argv
}

__is_available lsd \
&& alias ols='/bin/ls' && alias oll='/bin/ls -l' \
&& alias ls='lsd' \
&& alias ll='ls --date=+"%Y-%m-%d %H:%M:%S" --group-dirs=first -v --blocks=permission,user,size,date,name' \
&& alias lli='lsd --date=+"%Y-%m-%d %H:%M:%S" --group-dirs=first -v --blocks=permission,user,size,date,name,inode' \
&& alias llg='lsd --date=+"%Y-%m-%d %H:%M:%S" --group-dirs=first -v --blocks=permission,user,size,date,name,git'
# && function ls {
#   # list directories first and sort by version (1-$name before 10-$name)
#   lsd --group-directories-first -v $argv
# }

__is_available git && [[ -d ~/.cfg ]] \
&& function aconf {
  git --git-dir=$HOME/.cfg/ --work-tree=$HOME $@
}

__is_available lazygit \
&& alias lg='lazygit'

__is_available lazygit && [[ -d ~/.cfg ]] \
&& function lconf {
  lazygit --git-dir=$HOME/.cfg/ --work-tree=$HOME $@
}

# __is_available bat \
# && alias bat="bat --paging always"

__is_available bat \
&& function batdiff {
  git diff --name-only --relative --diff-filter=d | xargs bat --diff
}

function mvidgif-crop {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    ffmpeg -i "$i" -an -vf \
      "fps=8,scale=iw*2/3:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" \
      ${i:t:r}_masto-crop.gif
  done
}

function mvidgif {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    ffmpeg -i "$i" -an -vf \
      "fps=8,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" \
      ${i:t:r}-masto.gif
  done
}

function mvid-crop {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    ffmpeg -i "$i" -c:a aac -c:v libvpx-vp9 -vf \
      "scale=iw/2*3:-1:flags=lanczos" -crf 31 -b:v 1800k \
      -quality good -speed 0 -movflags +faststart -tune zerolatency \
      ${i:t:r}-masto-crop.webm
  done
}

function mvid {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    ffmpeg -i "$i" -c:a aac -c:v libvpx-vp9 -crf 31 -b:v 1800k \
      -quality good -speed 0 -movflags +faststart -tune zerolatency \
      ${i:t:r}-masto.webm
  done
}

function camconvert {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    ffmpeg -y -i "$i" -vf "unsharp=5:5:1.0:5:5:0.0" -an -c:v libx264 \
      -preset slow -b:v 10000k -pass 1 -f mp4 /dev/null
    ffmpeg -y -i "$i" -vf "unsharp=5:5:1.0:5:5:0.0" -an -c:v libx264 \
      -preset slow -b:v 10000k -pass 2 "${i:t:r}_small.mp4"
    rm -if ffmpeg2pass-0.log*
  done
}

function svid {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    ffmpeg -y -i "$i" -x264opts opencl -c:v libx264 -crf 23 -c:a aac \
      -movflags +faststart -tune zerolatency -maxrate 2M -bufsize 2M \
      ${i:t:r}-small.mp4
  done
}

function opti {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    optipng -nb -nc "$i";
    advpng -z4 "$i";
    pngcrush -rem gAMA -rem alla -rem cHRM -rem iCCP -rem sRGB \
      -rem time -ow "$i";
  done
}

function jopti {
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    jpegtran -copy none -optimize -progressive -outfile $i $i;
  done
}

function imgconv {
  # Create 100% image crop from the center pic with half
  # the size of the image
  if (( # == 0 )); then
    print >&2 "Usage: $0 [file]"
    return 1
  fi
  for i; do
    convert $i -resize 50% -sampling-factor 4:2:0 -strip \
      -quality 85 -interlace JPEG -colorspace RGB ${i:t:r}@0,5.jpg;
    convert $i -resize 25% -sampling-factor 4:2:0 -strip \
      -quality 85 -interlace JPEG -colorspace RGB ${i:t:r}@0,25.jpg;
  done
}

function ptgui() {
  cd $HOME/bin/PTGui
  ./PTGui
}

function f {
  FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git' FZF_DEFAULT_OPTS="--color=bg+:#302D41,bg:#1E1E2E,spinner:#F8BD96,hl:#F28FAD --color=fg:#D9E0EE,header:#F28FAD,info:#DDB6F2,pointer:#F8BD96 --color=marker:#F8BD96,fg+:#F2CDCD,prompt:#DDB6F2,hl+:#F28FAD --preview 'bat --style=numbers --color=always --line-range :500 {}'" fzf --height 60% --layout reverse --info inline --border --color 'border:#b48ead' $argv
}

function mpv {
  #env __NV_PRIME_RENDER_OFFLOAD=1 mpv $argv
  env mpv --vo=gpu --hwdec=vaapi $argv
}

function n {
  neofetch $argv
}

function r {
  ranger $argv
}

function yl {
  yt-dlp -x --audio-format mp3 --embed-thumbnail $argv
}

function ala {
  alacritty --hold -e $argv
}
